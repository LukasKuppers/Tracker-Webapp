@page "/"
@inject HttpClient http
@inject NavigationManager navManager
@using Model.Register

<div class="container">
    <div class="card o-hidden border-0 shadow-lg my-5">
        <div class="card-body p-0">
            <div class="row">
                <!--imgae-->
                <div class="col-lg-5 d-none d-lg-block bg-register-image"></div>
                <!--other content-->
                <div class="col-lg-7">
                    <div class="p-5">
                        <div class="text-center">
                            <h1 class="h4 text-gray-900 mb-4">Create an Account</h1>
                        </div>

                        <EditForm Model="@registerForm" OnValidSubmit="@SubmitRegisterForm" class="user">
                        <DataAnnotationsValidator />

                            <div class="form-group">
                                <label>Username</label>
                                <InputText id="username" class="form-control form-control-user"
                                           @bind-Value="registerForm.Username" />
                                <ValidationMessage For="@(() => registerForm.Username)" class="text-danger"/>
                            </div>
                            <div class="form-group">
                                <label>Email</label>
                                <InputText id="email" class="form-control form-control-user"
                                           @bind-Value="registerForm.Email" />
                                <ValidationMessage For="@(() => registerForm.Email)" class="text-danger"/>
                            </div>
                            <div class="row form-group">
                                <div class="col-sm-6 mb-3 mb-sm-0">
                                    <label>Password</label>
                                    <InputText type="password" id="password" class="form-control form-control-user"
                                               @bind-Value="registerForm.Password" />
                                    <ValidationMessage For="@(() => registerForm.Password)" class="text-danger"/>
                                </div>
                                <div class="col-sm-6">
                                    <label>Repeat Password</label>
                                    <InputText type="password" id="repeadPassword" class="form-control form-control-user"
                                               @bind-Value="registerForm.RepeatPassword" />
                                    <ValidationMessage For="@(() => registerForm.RepeatPassword)" class="text-danger"/>
                                </div>
                            </div>
                            <div class="text-danger">@errorMsg</div>
                            <button type="submit" class="btn btn-primary btn-user btn-block" style="margin-top:3em">
                                Register Account
                            </button>

                        </EditForm>

                        <hr>
                        <div class="text-center">
                            <a class="small" href="/login">Already have an account? Login.</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private RegisterForm registerForm = new RegisterForm();

    private Consumer apiConsumer;

    private string errorMsg = "";

    protected override Task OnInitializedAsync()
    {
        apiConsumer = new Consumer(http);
        return base.OnInitializedAsync();
    }

    private async Task SubmitRegisterForm()
    {
        errorMsg = "";
        RegisterIn body = new RegisterIn()
        {
            Username = registerForm.Username,
            Email = registerForm.Email,
            Password = registerForm.Password
        };

        var apiResponse = await apiConsumer.makeRequest<RegisterIn, RegisterIn>(MethodType.POST, "/api/authorization", body);
        var responseCode = apiResponse.Item2;

        switch (responseCode)
        {
            case System.Net.HttpStatusCode.UnprocessableEntity:
                errorMsg = "Email or Password has invalid format";
                break;
            case System.Net.HttpStatusCode.Conflict:
                errorMsg = "An account with the given email already exists";
                break;
            case System.Net.HttpStatusCode.Created:
                navManager.NavigateTo("login");
                break;
            default:
                return;
        }
    }
}
