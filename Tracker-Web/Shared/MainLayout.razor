@inherits LayoutComponentBase
@using Model
@using Model.User 
@inject NavigationManager navManager
@inject HttpClient http
@inject IJSRuntime JSRuntime

<div id="wrapper">
    @if (!isNoAuthPage)
    {
    <div>
        <NavMenu collapseNavMenu="@sidebarHidden"/>
    </div>
    }

    <div class="main w-100">
        <div class="d-flex flex-column h-100 @noAuthBackground" id="content-wrapper">
            <div id="content">
                <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">
                    @if (!isNoAuthPage)
                    {
                    <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3" @onclick="ToggleSidebar">
                        <i class="fa fa-bars"></i>
                    </button>
                    <ul class="navbar-nav ml-auto">
                        <li>
                            <span class="mr-2 d-none d-lg-inline text-gray-600 small">
                                @currentUser.Username
                            </span>
                        </li>
                    </ul>
                    } else
                    {
                    <div class="navbar-brand text-primary">Tracker</div>
                    }
                </nav>
                <div class="container-fluid">
                    @Body
                </div>
            </div>

            <footer class="sticky-footer bg-white">
                <div class="container my-auto">
                    <div class="copyright text-center my-auto">
                        <span>Copyright © Lukas Kuppers 2020</span>
                    </div>
                </div>
            </footer>
        </div>
    </div>
</div>

@code 
{      
    protected override async Task OnInitializedAsync()
    {
        Services.NoAuthPages pages = new Services.NoAuthPages(navManager);
        isNoAuthPage = pages.IsNoAuthPage(navManager.Uri);

        if (!isNoAuthPage)
        {
            // check if user is authorized
            apiConsumer = new Consumer(http, JSRuntime);

            var apiResponse = await apiConsumer.makeEmptyRequest<AuthStatusOut>(MethodType.GET, "/api/authorization");
            var responseCode = apiResponse.Item2;
            switch (responseCode)
            {
                case System.Net.HttpStatusCode.OK:
                    break;
                default:
                    navManager.NavigateTo("login");
                    await OnInitializedAsync();
                    return;
            }

            // get user
            var userResponse = await apiConsumer.makeEmptyRequest<User>(MethodType.GET, "/api/users/current");
            var userResponseCode = apiResponse.Item2;
            if (userResponseCode == System.Net.HttpStatusCode.OK)
            {
                currentUser = userResponse.Item1;
            }
            else
            {
                navManager.NavigateTo("login");
                await OnInitializedAsync();
                return;
            }
        }

        await base.OnInitializedAsync();
    }

    private Consumer apiConsumer;

    private User currentUser = new User();

    private bool sidebarHidden = false;
    private bool isNoAuthPage;

    private string noAuthBackground => isNoAuthPage ? "bg-gradient-primary" : "";

    private void ToggleSidebar()
    {
        sidebarHidden = !sidebarHidden;
    }
}